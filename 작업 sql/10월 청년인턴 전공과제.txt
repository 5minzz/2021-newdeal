import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib import rc
import platform

if platform.system() == 'Darwin':
plt.rc('font', family='AppleGothic')
elif platform.system() == 'Windows':
plt.rc('font', family='Malgun Gothic')

plt.rcParams['axes.unicode_minus'] = False

excel_url = r"C:\Users\USER\Desktop\전공_파이썬데이터분석과제_이름_ID.xlsx"
df = pd.read_excel(excel_url, sheet_name = 2)

# datatime 이라는 칼럼을 새로 만들어 준다. 시간을 확실히 주단위로 끊기 위해
df['datetime'] = df['확진일'].apply(lambda x: pd.to_datetime(str(x), format = '%Y-%m-%d', errors='raise'))

# 테이블에 합쳐주기 위해
df.set_index(df['datetime'], inplace=True)

df['count'] = 1 # sum을 위한 카운트 칼럼

# datetime 에는 각 주의 끝나는 시간이 표시
sorted_series = df.groupby(['지역', pd.Grouper(key = 'datetime', freq = 'W')])['count'].sum()
sorted_df = pd.DataFrame(sorted_series, columns = ['count'])

table = sorted_df.pivot_table(values = 'count', index = 'datetime', columns = '지역', fill_value = 0)

# x축 생성
x_data = pd.date_range(min(df['datetime']), max(df['datetime']), freq = 'W')
ax = table.plot(figsize = (10, 10))
ax.set_xticks(x_data)

plt.show()


-----------------------------------------------------------------
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib import rc
import platform

if platform.system() == 'Darwin':
plt.rc('font', family='AppleGothic')
elif platform.system() == 'Windows':
plt.rc('font', family='Malgun Gothic')

plt.rcParams['axes.unicode_minus'] = False

excel_url = r"C:\Users\USER\Desktop\전공_파이썬데이터분석과제_이름_ID.xlsx"
df = pd.read_excel(excel_url, sheet_name = 2)

# datatime 이라는 칼럼을 새로 만들어 준다. 시간을 확실히 주단위로 끊기 위해
df['datetime'] = df['확진일'].apply(lambda x: pd.to_datetime(str(x), format = '%Y-%m-%d', errors='raise'))

# 테이블에 합쳐주기 위해
df.set_index(df['datetime'], inplace=True)

df['count'] = 1 # sum을 위한 카운트 칼럼

# datetime 에는 각 주의 끝나는 시간이 표시
sorted_series = df.groupby(['지역', pd.Grouper(key = 'datetime', freq = 'W')])['count'].sum()
sorted_df = pd.DataFrame(sorted_series, columns = ['count'])

table = sorted_df.pivot_table(values = 'count', index = 'datetime', columns = '지역', fill_value = 0)

# x축 생성
x_data = pd.date_range(min(df['datetime']), max(df['datetime']), freq = 'W')
ax = table.plot(figsize = (10, 10))
ax.set_xticks(x_data)

plt.show()




-----------------------------------------------------------------------------------------------------------------



# 누적접종률
df2 = pd.read_excel(excel_url, sheet_name = 4)
condition = (df2['접종일'] >= "2021.01.01")&(df2['접종일'] <= "2021.09.31")
df2 = df2[condition]

df3 = pd.read_excel(excel_url, sheet_name = 3)
condition = (df3['사용월'] >= 202101) & (df3['사용월'] <= 202109)
df3 = df3[condition]

import calendar

x_data = ["21.01","21.02","21.03","21.04","21.05","21.06","21.07","21.08","21.09"]

y_data = []
for i in range(1,10):
    day = calendar.monthrange(2021,i)[1]
    condition = (df2['접종일'] == "2021."+"0"+str(i)+"."+str(day))
    if(len(df2[condition]) == 0) :
        y_data.append(0)
    else:
        y_data.append(df2[condition]['2차접종률(%)'])
x_data2 = [202101,202102,202103,202104,202105,202106,202107,202108,202109]

plt.ylim([0,100])

# 월별 지하철이용자
df_temp = df3.drop(['작업일자','사용월'],axis=1)
df3['총이용인원']= df_temp.sum(axis=1)

from matplotlib import rc
import seaborn as sns
%matplotlib inline

rc('font',family = 'AppleGothic')
plt.rcParams['axes.unicode_minus'] = False

table = sorted_df3.pivot_table(values = '총이용인원', index = '사용월',columns = '호선명',fill_value=0)

x_data2 = ["","202101","202102","202103","202104","202105","202106","202107","202108","202109"]


#합친거
plt.rcParams['figure.figsize'] = (36,24)
fig, ax1 = plt.subplots()

ax1.plot(table)
x_data2 = [202101,202102,202103,202104,202105,202106,202107,202108,202109]

#ax1=tale.plot()
ax1.set_xticklabels(x_data2)

ax1.tick_params(axis='both',direction='in')
#x_data2 = [202101,202102,202103,202104,202105,202106,202107,202108,202109]

ax2 = ax1.twinx()
ax2.bar(x_data2,y_data)
ax2.tick_params(axis = 'y' , direction='in')


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































