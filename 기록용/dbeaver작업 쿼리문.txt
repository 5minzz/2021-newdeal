잡다 dbeaver 작업량 1
-------------------------------------------------------------------------------------------------------------------------------------------------
select  st_makeline(case when strt_node_id = end_node_id then
tn.geom else st_reverse(tn.geom) end) from "TB_LINK" tn
join 
(select dijk.seq, tn.id, tn2.geom tngeom,
   st_startpoint(tn.geom), st_endpoint(tn.geom), tn.geom geom
        FROM pgr_bddijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target ,	
            len as cost FROM "TB_LINK" where strt_node_id is not null and end_node_id is not null and len is not null' ,
                1775225,1775417, false)   
               
                 )as dijk
on dijk.edge = tn.id
 join tb_node tn2
   on tn2.id = dijk.node
;

-------------------------------------------------------------------------------------------------------------------------------------------------
select st_geomfromtext ('LINESTRING (186246.61000101746 446870.2740913682, 186283.40913562785 446872.26685911795,
186213.22980135086 446936.5517192186, 186246.61000101746 446870.2740913682)');

-------------------------------------------------------------------------------------------------------------------------------------------------
select  geom from "TB_LINK" tn
join 
(SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost FROM "TB_LINK" where strt_node_id is not null and end_node_id is not null and len is not null' ,
                1775417, 1775225, false)              
                ) as dijk
on dijk.edge = tn.id
;

select * from test_dijk 

-------------------------------------------------------------------------------------------------------------------------------------------------

select array geom from "TB_LINK" tn 
join 
(SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost FROM "TB_LINK" where strt_node_id is not null and end_node_id is not null and len is not null' ,
                1775417, 1775225, false)              
) as dijk
on dijk.edge = tn.id ;


-------------------------------------------------------------------------------------------------------------------------------------------------
select PostGIS_full_version();

select ST_AsText( ST_MakeLine( 'LINESTRING(0 0, 1 1 , 2 3)', 'LINESTRING(2 2, 3 3)' ) );
-------------------------------------------------------------------------------------------------------------------------------------------------

잡다 dbeaver 작업량 2 

-------------------------------------------------------------------------------------------------------------------------------------------------
-- 함수 인자를 받아 Dijkstra 실행
-- 함수 지우기
drop function diy_dijkstra 
-- 함수 만들기
create or replace function diy_dijkstra(st int, ed int)
returns table (
seq int, id int, nopoint geometry(point, 5181),
stpoint geometry(point, 5181), edpoint geometry(point, 5181),
geom geometry(linestring, 5181)
)
as $$
begin
   return query select dijk.seq, tl.id, tn.geom tngeom,
   st_startpoint(tl.geom), st_endpoint(tl.geom), tl.geom geom
   from "TB_LINK" tl 
   join (
   SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost, len as reverse_cost FROM "TB_LINK" 
            where strt_node_id is not null and end_node_id is not null and len is not null and tp_uw is not true',
                st, ed, false)) as dijk
   on tl.id = dijk.edge
   join tb_node tn
   on tn.id = dijk.node;
end; $$
language 'plpgsql';


-- diy_dijkstra 실행해 보기
-- case 안준거
select st_makeline(geom) from diy_dijkstra(1899537, 1899625) ;
-- case 준거
select st_makeline(case when stpoint = nopoint then
geom else st_reverse(geom) end)
from diy_dijkstra(1899537, 1899625);

-------------------------------------------------------------------------------------------------------------------------------------------------


select  * from "TB_LINK" tn
join 
(select dijk.seq, tn.id, tn2.geom tngeom,
   st_startpoint(tn.geom), st_endpoint(tn.geom), tn.geom geom
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target ,	
            len as cost FROM "TB_LINK" where strt_node_id is not null and end_node_id is not null and len is not null' ,
                1775225,1775417, false)   
               
                 )as dijk
on dijk.edge = tn.id
 join tb_node tn2
   on tn2.id = dijk.node
   --------------------------------------------
   select dijk.seq, tl.id, tn.geom tngeom,
   st_startpoint(tl.geom), st_endpoint(tl.geom), tl.geom geom
   from "TB_LINK" tl 
   join (
   SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost, len as reverse_cost FROM "TB_LINK" 
            where strt_node_id is not null and end_node_id is not null and len is not null and tp_uw is not true',
                1775225,1775417, false)) as dijk
   on tl.id = dijk.edge
   join tb_node tn
   on tn.id = dijk.node;
-------------------------------------------------------------------------------------------------------------------------------------------------

  select st_makeline(case when diy.strtp = diy.endp then diy.geom else st_reverse(diy.geom) end) ,
   (select dijk.seq, tl.id, tn.geom tngeom,
   st_startpoint(tl.geom) strtp, st_endpoint(tl.geom) endp, tl.geom geom
   from "TB_LINK" tl 
   join (
   SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost, len as reverse_cost FROM "TB_LINK" 
            where strt_node_id is not null and end_node_id is not null and len is not null and tp_uw is not true',
                1775225,1775417, false)) as dijk
   on tl.id = dijk.edge
   join tb_node tn
   on tn.id = dijk.node) as diy
   
   
 -------------------------------------------------------------------------------------------------------------------------------------------------

  select * from dijk1
   (select 
  dijk.seq, tl.id, tn.geom tngeom,
   st_startpoint(tl.geom), st_endpoint(tl.geom), tl.geom geom
   from "TB_LINK" tl 
   join (
   SELECT *
        FROM pgr_dijkstra(
                'SELECT id as id, cast(strt_node_id as int) as source, cast(end_node_id as int) as target , 
            len as cost, len as reverse_cost FROM "TB_LINK" 
            where strt_node_id is not null and end_node_id is not null and len is not null and tp_uw is not true',
                1775225,1775417, false)) as dijk
   on tl.id = dijk.edge
   join tb_node tn
   on tn.id = dijk.node) as dijk1 ;
   
 -------------------------------------------------------------------------------------------------------------------------------------------------

  select * from diy_dijkstra(1775225,1775417) ;
 
 -------------------------------------------------------------------------------------------------------------------------------------------------

 
 select * from "TB_LINK" where c_de is null or link_code is null  ;

select * from tb_node where c_de is null or node_code is null  ; 
-------------------------------------------------------------------------------------------------------------------------------------------------
  
select * from "TB_LINK"  where ( 
link_code != '0000'
and link_code != '0001'
and link_code != '0010'
and link_code != '0011'
and link_code != '0100'
and link_code != '0101'
and link_code != '0110'
and link_code != '0111'
and link_code != '1000'
and link_code != '1001'
and link_code != '1010'
and link_code != '1011'
and link_code != '1100'
and link_code != '1101'
and link_code != '1110'
and link_code != '1111' 
) or link_code is null ;
-------------------------------------------------------------------------------------------------------------------------------------------------

select * from tb_node  where (
(c_de  <'2021-08-01' and c_de >'2021-11-27') or c_de is null
) ;

-------------------------------------------------------------------------------------------------------------------------------------------------

SELECT COUNT(*) FROM tb_node WHERE count_strt_node_id IS NULL AND count_end_node_id IS null;

SELECT id ,geom ,grid_id , c_wkr FROM tb_node WHERE count_strt_node_id IS NULL AND count_end_node_id IS NULL;
-------------------------------------------------------------------------------------------------------------------------------------------------

delete from tb_node where geom is null ;
-------------------------------------------------------------------------------------------------------------------------------------------------

select * from "ST_SEOUL_EMD" sse ;
select * from "ST_SEOUL_SGG" sss  ;
-------------------------------------------------------------------------------------------------------------------------------------------------

select * from node_master where sgg_cd is null or emd_cd is null;
select id ,grid_id , strt_node_id , end_node_id from link_master where strt_node_id is null or end_node_id is null ;
-------------------------------------------------------------------------------------------------------------------------------------------------

delete from tb_master where len = 0 ;